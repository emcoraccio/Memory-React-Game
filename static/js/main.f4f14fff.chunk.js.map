{"version":3,"sources":["components/CardContainer/index.js","components/Message/index.js","components/Score/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","props","changeScore","state","clicked","shuffleImgs","array","i","length","j","Math","floor","random","clickImage","imageId","indexOf","setState","className","this","animals","map","animal","key","id","src","image","alt","onClick","Component","Message","feedback","Score","score","topScore","Header","App","set","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"siCAyEeA,E,YApEb,WAAYC,GAAQ,IAAD,0BAITC,GAFR,4CAAMD,KAEuBA,MAArBC,YAJS,OAMjB,EAAKC,MAAQ,CACXC,QAAS,IAIX,EAAKC,YAAc,SAACC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,OAO7C,EAAKI,WAAa,SAACC,GACjB,IAA6C,IAAzC,EAAKX,MAAMC,QAAQW,QAAQD,GAAiB,CAE9C,IAAMV,EAAwC,KAA9B,EAAKD,MAAMC,QAAQI,OAAgB,GAAnC,sBAA4C,EAAKL,MAAMC,SAAvD,CAAgEU,IAEhF,EAAKE,SAAS,CACZZ,YAEFF,EAAY,iBAKZA,EAAY,SACZ,EAAKc,SAAS,CACZZ,QAAS,MAlCE,E,sEA2CT,IAAD,OAEP,OAEE,yBAAKa,UAAU,OACZC,KAAKb,YAAYc,GACjBA,EAAQC,KAAI,SAAAC,GAAM,OAEjB,yBAAKJ,UAAU,wBAAwBK,IAAKD,EAAOE,IACjD,yBAAKN,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKO,IAAKH,EAAOI,MAAOC,IAAKL,EAAOK,IAAKC,QAAS,WAAQ,EAAKd,WAAWQ,EAAOE,kB,GAvDrEK,aCYbC,MAdf,YAAgC,IAAbC,EAAY,EAAZA,SAEjB,OACE,oCACE,yBAAKb,UAAU,OACb,wBAAIA,UAAU,wBAAd,sBACA,wBAAIA,UAAU,kBAAkBa,MCazBC,MAnBf,YAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAEtB,OACE,oCACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,8BACb,sCAAYe,IAEd,yBAAKf,UAAU,oBACb,0CAAgBgB,OCKXC,MAZf,YAAgD,IAA9BF,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUH,EAAY,EAAZA,SAEjC,OACE,oCACE,kBAAC,EAAD,CAASA,SAAUA,IACnB,kBAAC,EAAD,CAAOE,MAAOA,EAAOC,SAAUA,MC8DtBE,E,2MApDbhC,MAAQ,CACN6B,MAAO,EACPC,SAAU,EACVH,SAAU,sE,EAGZ5B,YAAc,SAACkC,GAEb,GAAY,aAARA,EACF,GAAI,EAAKjC,MAAM6B,QAAU,EAAK7B,MAAM8B,UAAiC,KAArB,EAAK9B,MAAM6B,MAAc,CACvE,IAAMF,EAAgC,KAArB,EAAK3B,MAAM6B,MAAe,WAAa,WAClDA,EAA6B,KAArB,EAAK7B,MAAM6B,MAAe,EAAI,EAAK7B,MAAM6B,MAAQ,EAC/D,EAAKhB,SAAS,CACZgB,QACAC,SAAU,EAAK9B,MAAM6B,MAAQ,EAC7BF,kBAIF,EAAKd,SAAS,CACZgB,MAAO,EAAK7B,MAAM6B,MAAQ,EAC1BF,SAAU,iBAIC,UAARM,GACP,EAAKpB,SAAS,CACZgB,MAAO,EACPF,SAAU,e,wEAQd,OACE,yBAAKb,UAAU,aACb,kBAAC,EAAWC,KAAKf,OAMjB,kBAAC,EAAD,CAAeD,YAAagB,KAAKhB,mB,GA9CvB0B,aCLES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f4f14fff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles.css'\nimport animals from '../../animals.json';\n\nclass CardContainer extends Component {\n  constructor(props) {\n\n    super(props);\n\n    const { changeScore } = this.props;\n\n    this.state = {\n      clicked: [],\n    };\n\n\n    this.shuffleImgs = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n    }\n\n\n    this.clickImage = (imageId) => {\n      if (this.state.clicked.indexOf(imageId) === -1) {\n\n        const clicked = this.state.clicked.length === 11 ? [] : [...this.state.clicked, imageId]\n\n        this.setState({\n          clicked\n        });\n        changeScore(\"increase\");\n\n      }\n      else {\n        \n        changeScore(\"reset\");\n        this.setState({\n          clicked: []\n        });\n\n      };\n    };\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div className=\"row\">\n        {this.shuffleImgs(animals)}\n        {animals.map(animal => (\n\n          <div className=\"col s6 m4 l3 card-col\" key={animal.id}>\n            <div className=\"card hoverable\">\n              <div className=\"card-image\">\n                <img src={animal.image} alt={animal.alt} onClick={() => { this.clickImage(animal.id) }} />\n              </div>\n            </div>\n          </div>\n        ))}\n\n      </div>\n\n    );\n\n  }\n\n}\n\nexport default CardContainer","import React from 'react';\n\nfunction Message({ feedback }) {\n\n  return (\n    <>\n      <div className=\"row\">\n        <h1 className=\"title col s12 center\">Animal Memory Game</h1>\n        <h4 className=\"col s12 center\">{feedback}</h4>\n      </div>\n    </>\n  );\n\n};\n\n\nexport default Message;","import React from 'react';\n\nfunction Score({ score, topScore }) {\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col s6 m3 offset-m3 center\">\n          <h5>Score: {score}</h5>\n        </div>\n        <div className=\"col s6 m3 center\">\n          <h5>Top Score: {topScore}</h5>\n        </div>\n        \n      </div>\n    </>\n  );\n\n};\n\n\nexport default Score;","import React from 'react';\nimport Message from '../Message';\nimport Score from '../Score';\n\nfunction Header({ score, topScore, feedback }) {\n\n  return (\n    <>\n      <Message feedback={feedback}/>\n      <Score score={score} topScore={topScore}/>\n    </>\n  );\n\n}\n\n\nexport default Header","import React, { Component } from 'react';\nimport './App.css';\nimport CardContainer from './components/CardContainer';\nimport Header from './components/Header';\n// import Select from 'react-select'\n\n// const options = [\n//   { value: 'easy', label: 'Easy' },\n//   { value: 'medium', label: 'Medium' },\n//   { value: 'difficult', label: 'Difficult' }\n// ]\n\n// const MyComponent = () => (\n//   <Select options={options} />\n// )\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    feedback: \"Click a picture to start. Don't click any pictures more than once.\"\n  }\n\n  changeScore = (set) => {\n\n    if (set === \"increase\") {\n      if (this.state.score === this.state.topScore || this.state.score === 11) {\n        const feedback = this.state.score === 11 ? \"You Win!\" : \"Correct!\"\n        const score = this.state.score === 11 ? 0 : this.state.score + 1\n        this.setState({\n          score,\n          topScore: this.state.score + 1,\n          feedback\n        });\n      }\n      else {\n        this.setState({\n          score: this.state.score + 1,\n          feedback: \"Correct!\"\n        })\n      }\n    }\n    else if (set === \"reset\") {\n      this.setState({\n        score: 0,\n        feedback: \"Game Over\"\n      })\n    }\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <Header {...this.state} />\n        {/* <div className=\"row\">\n          <div className=\"col s6 offset-s3\">\n          <Select options={options} />\n          </div>\n        </div> */}\n        <CardContainer changeScore={this.changeScore} />\n      </div>\n    );\n\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}